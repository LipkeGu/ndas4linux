#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper. 
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# This version is for a hypothetical package that can build a kernel modules
# architecture-dependant package via make-kpkg, as well as an
# architecture-independent module source package, and other packages
# either dep/indep for things like common files or userspace components
# needed for the kernel modules.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

CFLAGS = -Wall -g

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
else
	CFLAGS += -O2
endif

# some default definitions, important!
# 
# Name of the source package
psource:=ndas-modules-src

# The short upstream name, used for the module source directory
sname:=ndas

### KERNEL SETUP
### Setup the stuff needed for making kernel module packages
### taken from /usr/share/kernel-package/sample.module.rules

# prefix of the target package name
PACKAGE=ndas-modules
# modifieable for experiments or debugging m-a
MA_DIR ?= /usr/share/modass
# load generic variable handling
-include $(MA_DIR)/include/generic.make
# load default rules, including kdist, kdist_image, ...
-include $(MA_DIR)/include/common-rules.make
  
# module assistant calculates all needed things for us and sets
# following variables:
# KSRC (kernel source directory), KVERS (kernel version string), KDREV
# (revision of the Debian kernel-image package), CC (the correct
# compiler), VERSION (the final package version string), PKGNAME (full
# package name with KVERS included), DEB_DESTDIR (path to store DEBs)
  
# The kdist_configure target is called by make-kpkg modules_config and
# by kdist* rules by dependency. It should configure the module so it is
# ready for compilation (mostly useful for calling configure).
# prep-deb-files from module-assistant creates the neccessary debian/ files 
kdist_configure: prep-deb-files
kdist_config: kdist_configure 
  
# the kdist_clean target is called by make-kpkg modules_clean and from
# kdist* rules. It is responsible for cleaning up any changes that have
# been made by the other kdist_commands (except for the .deb files created)
kdist_clean:
	rm -f build-stamp configure-stamp
#	-$(MAKE) $(MFLAGS) -f debian/rules clean
	-$(MAKE) clean
	-dh_prep
#	rm -f driver/*.o driver/*.ko
#
### end  KERNEL SETUP

configure: configure-stamp
configure-stamp:
	dh_testdir
	# Add here commands to configure the package.

	touch configure-stamp


build-arch: configure-stamp  build-arch-stamp
build-arch-stamp:
	dh_testdir

	# Add here command to compile/build the package.
	$(MAKE) ndas-admin

	touch $@

k = $(shell echo $(KVERS) | grep -q ^2.6 && echo k)

# the binary-modules rule is invoked by module-assistant while processing the
# kdist* targets. It is called by module-assistant or make-kpkg and *not*
# during a normal build
binary-modules: kdist_configure
	dh_testroot
	dh_prep 
	dh_installdirs lib/modules/$(KVERS)/kernel/drivers/block/ndas

	# Build the module

	$(MAKE) NDAS_KERNEL_PATH=$(KSRC) NDAS_KERNEL_VERSION=$(KVERS) ndas-kernel
#	$(MAKE) -C drivers KERNEL_DIR=$(KSRC) KVERS=$(KVERS)

	# Install the module
	if [ "$k" = "k" ]; then \
	install -m644 ndas_sal.$ko ndas_core.$ko ndas_block.$ko ndas_scsi.$ko \
		$(CURDIR)/debian/$(PKGNAME)/lib/modules/$(KVERS)/kernel/drivers/block/ndas ;\
	else \
	install -m644 ndas_sal.$ko ndas_core.$ko ndas_block.$ko \
		$(CURDIR)/debian/$(PKGNAME)/lib/modules/$(KVERS)/kernel/drivers/block/ndas ;\
	fi
	 

	dh_installdocs
	dh_installchangelogs
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol -- -v$(VERSION)
	dh_md5sums
	dh_builddeb --destdir=$(DEB_DESTDIR)
	dh_prep

build-indep:  configure-stamp build-indep-stamp
build-indep-stamp:
	dh_testdir

	# Add here command to compile/build the arch indep package.
	# It's ok not to do anything here, if you don't need to build
	#  anything for this package.
	#docbook-to-man debian/ndas.sgml > ndas.1

	touch $@

build: build-arch build-indep

clean:
	dh_testdir
	#dh_testroot
	rm -f build-arch-stamp build-indep-stamp configure-stamp

	# Add here commands to clean up after the build process.
	-$(MAKE) clean

	dh_prep

libndas: 
	# If libndas does not exist, create one removing license aggrement.
	if [ -f libndas.a.sfx ]; then \
		tail -n +119 libndas.a.sfx > libndas.a; \
	fi

install: DH_OPTIONS=
install: build libndas
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs
	dh_installdirs usr/share/ndas

	# Create the directories to install the source into
	dh_installdirs -p$(psource)  usr/src/modules/$(sname)/debian

	# Copy only the driver source to the proper location
	cp -r block debian/$(psource)/usr/src/modules/$(sname)
	cp -r scsi debian/$(psource)/usr/src/modules/$(sname)
	cp -r sal debian/$(psource)/usr/src/modules/$(sname)
	cp -r inc debian/$(psource)/usr/src/modules/$(sname)
	cp -r admin debian/$(psource)/usr/src/modules/$(sname)
	cp -r ipkg debian/$(psource)/usr/src/modules/$(sname)
	cp *.c debian/$(psource)/usr/src/modules/$(sname)
	cp Makefile debian/$(psource)/usr/src/modules/$(sname)
	cp *.mk debian/$(psource)/usr/src/modules/$(sname)
	cp libndas.a debian/$(psource)/usr/src/modules/$(sname)

#	cp -s driver/*  debian/$(psource)/usr/src/modules/$(sname)
	# Copy the needed debian/ pieces to the proper location
	cp debian/*modules.in* \
		debian/$(psource)/usr/src/modules/$(sname)/debian
	cp debian/*_KVERS_* debian/rules debian/changelog debian/copyright \
		debian/compat debian/$(psource)/usr/src/modules/$(sname)/debian/
	cd debian/$(psource)/usr/src && tar c modules | bzip2 -9 > $(sname).tar.bz2 && rm -rf modules

	# Add here commands to install the package into debian/ndas
	dh_install ndasadmin usr/sbin
	dh_install ndas usr/share/ndas
	dh_install mknod.sh usr/share/ndas


# Build architecture-independent files here.
# Pass -i to all debhelper commands in this target to reduce clutter.
binary-indep: build install
	dh_testdir -i
	dh_testroot -i
	dh_installchangelogs  -i
	dh_installdocs -i
#	dh_installexamples -i
#	dh_install -i
#	dh_installmenu -i
#	dh_installdebconf -i
#	dh_installlogrotate -i
#	dh_installemacsen -i
#	dh_installpam -i
#	dh_installmime -i
#	dh_installinit -i --init-script=ndas
#	dh_installcron -i
#	dh_installinfo -i
#	dh_installman -i
	dh_link -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
#	dh_perl -i
#	dh_python -i
#	dh_makeshlibs -i
	dh_installdeb -i
	dh_shlibdeps -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir -s
	dh_testroot -s
#	dh_installdebconf -s
	dh_installdocs -s
#	dh_installexamples -s
#	dh_installmenu -s
#	dh_installlogrotate -s
#	dh_installemacsen -s
#	dh_installpam -s
#	dh_installmime -s
#	dh_installinit -s
	dh_installinit -s --init-script=ndas
#	dh_installcron -s
#	dh_installman -s
#	dh_installinfo -s
	dh_installchangelogs  -s
#	dh_strip -s
	dh_link -s
	dh_compress -s
	dh_fixperms -s
#	dh_makeshlibs -s
	dh_installdeb -s
#	dh_perl -s
	dh_shlibdeps -s
	dh_gencontrol -s
	dh_md5sums -s
	dh_builddeb -s

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure binary-modules kdist kdist_configure kdist_image kdist_clean libndas 
