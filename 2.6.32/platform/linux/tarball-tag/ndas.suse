#! /bin/sh
#
# Copyright ( C ) 2012 IOCELL Networks
# 
# SuSe configuration
### BEGIN INIT INFO
# Provides: ndas
# Required-Start: $network
# Required-Stop: $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Start the NDAS driver
### END INIT INFO
_sep_=':'
_variants24_="smp deflt smp4G psmp"
_variants26_="default smp bigsmp "
_variants_="${_variant24_} ${_variant26_}"
# Print the versions of kernels, the NDAS drivers support.
function supported_kernel_versions() {
    rpm -q --queryformat "[%{REQUIRENAME}${_sep_}%{REQUIREVERSION}-${1}${_sep_}%{=ARCH}\\n]" \
            ndas-kernel-${1} 2> /dev/null | \
            grep "^kernel-${1}" | cut -d"${_sep_}" -f2-3;
    rpm -q --queryformat "[%{REQUIRENAME}${_sep_}%{REQUIREVERSION}-${1}${_sep_}%{=ARCH}\\n]" \
            ndas-kernel-${1} 2> /dev/null | \
            grep "^k_${1}" | cut -d"${_sep_}" -f2-3;
    return 0;
}
# smp: all
# bigsmp:
# psmp : 8.1
# xen : 9.3 10.0 -
# smp4G: 8.x
function get_kernel_variant() {
    _version_=`uname -r`;
    for s in $_variants_;
    do
        if [ "${_version_/$s}" != "${_version_}" ] ; then
            echo $s;
            return 0;
        fi
    done
    echo "";
    return 0;
}
function supports_current_kernel() {
    _current_variant_=`get_kernel_variant`; 
    _kernels=`supported_kernel_versions $_current_variant_`;
    _current_kernel="`uname -r`${_sep_}`uname -m`";
    for s in $_kernels;
    do
        if [ "$s" = "$_current_kernel" ]; then return 0; fi
    done
    return 1;
}
# Find the reason fail to start
function find_reason_fail() {
    supports_current_kernel ;
    if [ $? -ne 0 ] ; then 
        echo "You have the NDAS driver(s) for";
        supported_kernel_versions | sed -e "s|${_sep_}| |g";
        for s in $_variants_;
        do
            supported_kernel_versions $s| sed -e "s|${_sep_}| |g";
        done
        echo "But don't have the NDAS driver for current kernel `uname -r` `uname -m`"
        echo "Please install the NDAS driver for current kernel, or build the customized NDAS driver from the NDAS tarball source";
        return 0; # found the reason
    fi
    return 1; # can not found why fail
}
#
# Display the guide to report bug 
#
function display_guide_to_report_bug() {
    echo " Report this problem with the following messages at http://ndas4linux.iocellnetworks.com/cgi-bin/trac.cgi/newticket";
    echo "==============================================================================";
    cat /proc/version;
    ls -l /lib/modules/*/kernel/drivers/block/ndas/*;
    gcc --version;
    echo "==============================================================================";
    return 0;
}
BASEDIR=/usr

PATH="$BASEDIR/sbin:$BASEDIR/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH"
export PATH

test -d $BASEDIR || exit 0

case $1 in
 start)
# start
    echo -n "Starting NDAS:"
    
    ( grep -c ndas_ /lib/modules/`uname -r`/modules.dep || depmod )> /dev/null 2>&1
    modprobe ndas_sal > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
        echo " failed to load sal module" ; 
        if find_reason_fail; then
            exit 0;
        fi
        display_guide_to_report_bug;
        exit 1;
    fi
    modprobe ndas_core > /dev/null 2>&1 
    if [ $? -ne 0 ] ; then
        echo " failed to load core module" ; 
	    rmmod ndas_sal > /dev/null 2>&1;
        display_guide_to_report_bug;
        exit 1;
    fi
    modprobe ndas_block > /dev/null 2>&1;
    if [ $? -ne 0 ] ; then
        echo " failed to load block module" ; 
        rmmod ndas_core > /dev/null 2>&1;
        rmmod ndas_sal > /dev/null 2>&1;
        exit 1;
    fi

    echo -n " modules inserted"

    if [ ! -f /dev/ndas ]; then
        /usr/share/ndas/mknod.sh > /dev/null 2>&1
        echo -n " node created"
    fi

    /usr/sbin/ndasadmin start > /dev/null 2>&1 
    if [ $? -ne 0 ] ; then
        echo " failed to start ndas service" ; 
        rmmod ndas_block > /dev/null 2>&1
        rmmod ndas_core > /dev/null 2>&1
        rmmod ndas_sal > /dev/null 2>&1
        display_guide_to_report_bug;
        exit 1;
    fi
    echo " started"
	
    sleep 2

    grep /dev/nd /etc/fstab | while read device mountpath fstype options; 
    do
        mount -t ${fstype} -o ${options} ${device} ${mountpath} 
    done

    ;;
 stop)
        echo -n "Stopping NDAS:"

        sync;sync
        echo -n " synced"

        # unmount all filesystems on netdisk devices
	    for s in `grep ^/dev/nd /etc/mtab | cut -d' ' -f1`
	    do
		    umount -f $s > /dev/null 2>&1
	    done
        echo -n " umounted"

        sync;sync
        echo -n " synced"

        /usr/sbin/ndasadmin stop > /dev/null 2>&1
        echo -n " stopped"
        sleep 3

        rmmod ndas_block > /dev/null 2>&1
        rmmod ndas_core > /dev/null 2>&1
        rmmod ndas_sal > /dev/null 2>&1

        echo " modules removed"
        ;;
 restart)
        $0 stop
        $0 start
        ;;
 *)
        echo "Unknown request $1"
        echo "usage: $0 [start|stop]"
        ;;
esac

exit 0
