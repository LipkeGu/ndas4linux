There are many obsolete options and source code still inplace in this repo. 
For now we are using just 2 build commands to create the client software. 
Please see the todo.txt file for the basic direction

This how to describes the simplest export from the top level. It will create
the build_ARCH_linux folder, where you can find a tarball package and the 
client code ready for compilation in order to test. 

Pre-requisites: git, ssh, make, gcc kernel-headers or some other kernel source
	folder. See howtobuild.old.txt or make help for options to set if
	using a kernel source folder.

There two working options for x86 and x86_64 which don't need any special
variable setup.
	x86 	linux-rel or linux-dev
	x86_64	linux64-rel or linux64-dev


Here is an example download and build for x86 32bit on Fedora 16: 


1) Download and export a build folder. 
	$ git clone gitosis@ndas4linux.iocellnetworks.com:ndas4linux
	$ cd ndas4linux/3.4.4
	$ make linux-rel

This creates a working build folder and tarball of what is in the working
build folder and the distributable tarball. To see what you have, try:

	$ ls dist
	libndas.a	ndas-3.4-4.x86.tar.gz
	$ ls build_x86_linux/ndas-3.4-4.x86
	admin        debuglevel.mk  ipkg and some other files and folders


2) Next you want to try building and running the software as follows.

	$ cd build_x86_linux/ndas-3.4-4.x86
	$ make
	$ sudo make install
	$ sudo /etc/init.d/ndas start


3) If there modules load you then can test the usage with the ndasadmin tool.
	
	$ sudo ndasadmin help


4) If you can mount disks and use them for stable transfer, then it is all 
set. The distribution tarball (3.4.4/dist/ndas-3.4-4.x86.tar.gz) should be
copied into the release folder. It will be later on pushed to the repo for
testing if anyone else has the same kernel.

	$ cd ../../
	$ cp dist/ndas-3.4-4.x86.tar.gz  release/


5) We should stop the current ndas, clean up all the files, then try 
installing and using the rmp packages. 

	$ sudo ndasadmin disable -s `N` <- N is each slot that was enabled.
	$ sudo /etc/init.d/ndas stop
	$ make linux-clean
	$ rm -rf build_x86_ndas
	$ rm -f dist/*
	

6) Next it is time to test if the rpm build packages can install and run.
You can also use the release/tarball.file for building the rpm files like
below.

	$ cd release
	$ rpm -tb ndas-3.4-4.x86.tar.gz 

On the default Fedora machine it give the packages in the users home dir. 

	$ ls ~/rpmbuild/RPMS/i386/
	ndas-admin-3.4.4.x86-fc16.i386.rpm   
	ndas-kernel-3.4.4.x86-fc16.i386.rpm


7) Test installing the rpm and repeat the ndas usage testing that you did on 
the source code. The ndas-admin rpm will automatically start ndas for you.

	$ sudo rpm -ivh release/ndas-kernel-3.4.4.x86-fc16.i386.rpm
	$ sudo rpm -ivh ndas-admin-3.4.4.x86-fc16.i386.rpm 

	# removing rpm #
	$ sudo rpm -ev ndas-admin-3.4.4.x86-fc16.i386 
	$ sudo rpm -ev ndas-kernel-3.4.4.x86-fc16.i386
	

8) If the rpm worked, copy the packages into release and then push the new 
tar.gz and rpm up to the repo.

	$ cp ~/rpmbuild/RPMS/i386/* release
	$ git add .
	$ git commit 
	$ git push



Hey, what about errors? 

Good question.

If there are compile errors or if something fails in the modules or ndasadmin
program, it can probably be fixed in the build_x86_linux/ndas-#.#.#.x folder.
When all is fixed in there and the build is stable, the changed files should
be written into the original export folder. 

	$ cd ~/ndas4linux/3.4.4
	$ rsync -r --existing \
		build_x86_linux/ndas-3.4.4.x86 \
		platform/linux/tarball-tag


OK. What if I need a next level or different kernel?

In this case, copy the earlier main folder, then change version.mk to match
the kernel you want to build for.

	$ cd ~/ndas4linux
	$ cp -r 2.6.38  2.6.41
	$ cd 2.6.41
	$ vi version.mk
	

